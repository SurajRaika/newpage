---

---

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Event Configuration Editor</title>
    <!-- Tailwind CSS CDN for styling -->
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- Tailwind CSS Custom Configuration for Dark Mode -->
    <script>
        tailwind.config = {
            darkMode: 'class', // Enable class-based dark mode
            theme: {
                extend: {
                    colors: {
                        'custom-dark-bg': 'rgb(26, 26, 26)',
                        'custom-light-bg': 'white',
                        'custom-dark-text': 'white',
                        'custom-light-text': 'rgb(26, 26, 26)',
                        'custom-border-light': 'rgb(26, 26, 26)',
                        'custom-border-dark': 'white',
                    }
                }
            }
        }
    </script>
    <!-- Inter font for better readability -->
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <!-- Material Icons for browser UI -->
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
    <style>
        /* Custom scrollbar for better aesthetics, rgb(26, 26, 26) for minimalist design */
        .overflow-y-auto::-webkit-scrollbar {
            width: 6px; /* Thinner scrollbar */
        }
        .overflow-y-auto::-webkit-scrollbar-track {
            background: white; /* White track */
            border-radius: 0; /* Sharp corners */
        }
        .overflow-y-auto::-webkit-scrollbar-thumb {
            background: rgb(26, 26, 26); /* Soft black thumb */
            border-radius: 0; /* Sharp corners */
        }
        .overflow-y-auto::-webkit-scrollbar-thumb:hover {
            background: rgb(51, 51, 51); /* Darker soft black on hover */
        }

        /* Styles for the message box - soft black and white theme */
        #messageBox {
            opacity: 0;
            pointer-events: none; /* Allows clicks to pass through when hidden */
        }
        #messageBox.show {
            opacity: 1;
            pointer-events: auto;
        }
        /* Specific error and success styles using subtle shades */
        #messageBox.error {
            background-color: #ffe0e0; /* Light red */
            color: #cc0000; /* Darker red */
            border-color: #cc0000;
        }
        #messageBox.success {
            background-color: #e0ffe0; /* Light green */
            color: #008000; /* Darker green */
            border-color: #008000;
        }

        /* Custom aspect ratio for the right column - 16:9 */
        .aspect-ratio-16-9 {
            padding-bottom: 56.25%; /* 9 / 16 = 0.5625 */
            height: 0; /* Essential for padding-bottom trick */
        }

        /* Specific styles for message set positions in preview - soft black and white theme */
        .preview-message-block {
            box-shadow: none; /* No shadow */
        }
        /* Positioning classes for preview message blocks */
        .pos-bottom-left { bottom: 0; left: 0; }
        .pos-bottom-right { bottom: 0; right: 0; }
        .pos-top-left { top: 0; left: 0; }
        .pos-top-right { top: 0; right: 0; }
        .pos-center { top: 50%; left: 50%; transform: translate(-50%, -50%); }

        /* Sizing classes */
        .size-small { width: 8rem; }
        .size-medium { width: 11rem; }
        .size-large { width: 15rem; }

        /* Responsive font sizes based on message card size */
        .size-small .text-content {
            font-size: 0.55rem; /* Smaller font for small cards */
        }
        .size-medium .text-content {
            font-size: 0.65rem; /* Medium font for medium cards */
        }
        .size-large .text-content {
            font-size: 0.75rem; /* Larger font for large cards (original text-xs) */
        }

        /* Styling for radio buttons to fit the theme */
        input[type="radio"] {
            -webkit-appearance: none;
            -moz-appearance: none;
            appearance: none;
            width: 12px;
            height: 12px;
            border: 1px solid rgb(26, 26, 26);
            border-radius: 0; /* Sharp corners */
            margin-right: 0.5rem;
            vertical-align: middle;
            position: relative;
            top: -1px;
            cursor: pointer;
        }

        input[type="radio"]:checked {
            background-color: rgb(26, 26, 26);
            border-color: rgb(26, 26, 26);
        }
        input[type="radio"]:checked::before {
            content: '';
            display: block;
            width: 6px;
            height: 6px;
            background-color: white;
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
        }
    </style>
</head>
<body class="bg-white  h-screen flex flex-col justify-between overflow-hidden">
    <header class="bg-custom-dark-bg text-white py-0.5 border-b border-custom-dark-bg">
        <div class="container  flex justify-between items-center">
            <div class=" flex px-2">
                <button id="backButton" class="bg-custom-light-bg text-custom-light-text font-bold py-0.5 px-2 text-xs border border-custom-light-text rounded-none hover:bg-gray-200 transition duration-150 hidden">back arroy</button>               
                <h1 id="appTitle" class="text-lg font-bold">Event Configuration Editor</h1>
            </div>    
            <div id="headerButtons" class="flex flex-row-reverse space-x-2 z-10">
                <button id="downloadOption" class="bg-custom-light-bg text-custom-light-text font-bold py-0.5 px-2 text-xs border border-custom-light-text rounded-none hover:bg-gray-200 transition duration-150 ">Download</button>
                <button id="uploadOption" class="bg-custom-light-bg text-custom-light-text font-bold py-0.5 px-2 text-xs border border-custom-light-text rounded-none hover:bg-gray-200 transition duration-150 ">Upload</button>
            </div>
        </div>
    </header>

    <div class="flex flex-col-reverse md:flex-row flex-1 overflow-hidden"> <!-- Main two-column container -->

        <!-- Left Column: User Interaction -->
        <div id="leftColumn" class="w-1/3 flex flex-col overflow-hidden">
            <!-- Event Selection Page -->
            <div id="eventSelectionPage" class="p-4 flex-grow flex flex-col justify-between overflow-y-auto">
                <div>
                    <h2 class="text-xl font-semibold mb-4">Choose an Event to Edit</h2>
                    <div class="space-y-2">
                        <label class="block text-custom-light-text">
                            <input type="radio" name="selectEventType" value="offlineEvent" checked> Offline Event
                        </label>
                        <label class="block text-custom-light-text">
                            <input type="radio" name="selectEventType" value="inactivityEvent"> Inactivity Event
                        </label>
                        <label class="block text-custom-light-text">
                            <input type="radio" name="selectEventType" value="randomTipsEvent"> Random Tips Event
                        </label>
                        <label class="block text-custom-light-text">
                            <input type="radio" name="selectEventType" value="timeOfDayEvent"> Time of Day Event
                        </label>
                    </div>
                </div>
                <button id="goToEditorBtn" class="bg-custom-dark-bg text-white font-bold py-2 px-4 border border-custom-dark-bg rounded-none hover:bg-gray-800 transition duration-150 mt-4">Go to Editor</button>
            </div>

            <!-- Configuration Editor Page (initially hidden) -->
            <div id="configEditorPage" class="hidden p-2 flex-grow flex flex-col overflow-y-auto">
                <!-- Event Configuration Section -->
                <section class="mb-4 border-b border-custom-light-text pb-2">
                    <h2 class="text-lg font-semibold mb-2">Event Details</h2>
                    <div class="space-y-2">
                        <div>
                            <label for="probability" class="block text-custom-light-text text-xs font-medium mb-1">Probability (%):</label>
                            <input type="number" id="probability" min="0" max="100" value="50"
                                class="w-full p-1 border border-custom-light-text rounded-none text-xs bg-custom-light-bg text-custom-light-text">
                        </div>
                        <div>
                            <label for="waitTime" class="block text-custom-light-text text-xs font-medium mb-1">Wait Time (ms):</label>
                            <input type="number" id="waitTime" min="0" value="5000"
                                class="w-full p-1 border border-custom-light-text rounded-none text-xs bg-custom-light-bg text-custom-light-text">
                        </div>
                        <div>
                            <label for="priority" class="block text-custom-light-text text-xs font-medium mb-1">Priority:</label>
                            <select id="priority" class="w-full p-1 border border-custom-light-text rounded-none text-xs bg-custom-light-bg text-custom-light-text">
                                <option value="1">1: LOW</option>
                                <option value="2">2: MEDIUM</option>
                                <option value="3">3: HIGH</option>
                                <option value="4">4: CRITICAL</option>
                            </select>
                        </div>
                    </div>
                </section>

                <!-- Message Sets Section -->
                <section class="flex-grow flex flex-col border-b border-custom-light-text pb-2">
                    <h2 class="text-lg font-semibold mb-2 flex justify-between items-center">
                        Message Sets
                        <button id="addMessageSetBtn" class="bg-custom-dark-bg text-white font-bold py-1 px-2 text-xs border border-custom-dark-bg rounded-none hover:bg-gray-800 transition duration-150">
                            + Add
                        </button>
                    </h2>
                    <div id="messageSetsContainer" class="space-y-2  ">
                        <!-- Message sets will be dynamically added here -->
                    </div>
                </section>
            </div>
        </div>

        <!-- Right Column: Dynamic Display / Preview -->
        <div class="w-2/3 flex flex-col justify-center  py-1 p-2">
            
        <!-- Browser Container -->
<div id="rightColumnContainer" class="relative w-full overflow-hidden flex items-center justify-center aspect-video">
 <div id="browserContainer"
    class="absolute top-0 left-0 w-full h-full rounded-sm shadow-xl ring-1 ring-gray-300 overflow-hidden flex flex-col
           bg-gray-50 text-custom-light-text border-gray-500 border
           dark:bg-custom-dark-bg dark:text-custom-dark-text dark:border-gray-600">
    
    <!-- Top bar -->
    <div id="browserHeader"
        class="flex items-center gap-3 px-4 py-3 border-b
               bg-gray-200 border-gray-300
               dark:bg-gray-800 dark:border-gray-700">
        
        <!-- Traffic lights -->
        <div class="flex gap-2 items-center">
            <span class="w-3 h-3 rounded-full bg-red-500"></span>
            <span class="w-3 h-3 rounded-full bg-yellow-400"></span>
            <span class="w-3 h-3 rounded-full bg-green-500"></span>
        </div>

        <!-- Address bar -->
        <div id="addressBar"
            class="flex-1 mx-4 rounded-sm border px-3 py-1 text-sm truncate
                   bg-white text-gray-800 border-gray-400
                   dark:bg-gray-700 dark:text-gray-200 dark:border-gray-600">
            https://event-config-editor.com
        </div>

        <!-- Action icons -->
        <div id="actionIcons" class="flex items-center gap-3 text-gray-600 dark:text-gray-300">
            <span class="material-icons cursor-pointer">refresh</span>

            <!-- Theme Toggle Button -->
            <button id="themeToggleBtn"
                class="w-8 h-8 flex items-center justify-center rounded-full hover:bg-gray-300 dark:hover:bg-gray-700 transition">
                <span id="themeIcon" class="material-icons text-lg">dark_mode</span>
            </button>

            <span class="material-icons cursor-pointer">more_vert</span>
        </div>
    </div>

    <!-- Content area -->
    <div id="browserContent"
        class="p-6 flex-grow relative overflow-y-auto
               bg-gray-50 text-gray-800
               dark:bg-custom-dark-bg dark:text-custom-dark-text">
        <div id="rightColumnContent"
            class="absolute inset-0 flex flex-col  items-center justify-center  ">
            <div class="text-gray-800 text-base font-bold dark:text-white  ">
                How to Use This Editor
            </div>
            <div class="text-gray-600 text-xs mt-1 dark:text-gray-300">
                Select an event type on the left and click 'Go to Editor' to configure it.
            </div>
            <div class="text-gray-900 text-xs mt-2 dark:text-gray-100">
                Configurations are saved locally in your browser.
            </div>
        </div>
    </div>
</div>

</div>

<!-- Script for Theme Toggle -->
<script>
    const themeToggleBtn = document.getElementById('themeToggleBtn');
    const themeIcon = document.getElementById('themeIcon');
    const htmlElement = document.documentElement;

    themeToggleBtn.addEventListener('click', () => {
        htmlElement.classList.toggle('dark');
        themeIcon.textContent = htmlElement.classList.contains('dark') ? 'light_mode' : 'dark_mode';
    });
</script>


          
        </div>
    </div>

    <div id="messageBox" class="fixed top-4 right-4 p-3 border border-custom-light-text rounded-none z-10 text-sm bg-custom-light-bg text-custom-light-text transition duration-500"></div>

    <script>
        // Define EventPriority enum values for clarity and consistency
        const EventPriority = {
            LOW: 1,
            MEDIUM: 2,
            HIGH: 3,
            CRITICAL: 4
        };

        // DOM elements references
        const probabilityInput = document.getElementById('probability');
        const waitTimeInput = document.getElementById('waitTime');
        const prioritySelect = document.getElementById('priority');
        const messageSetsContainer = document.getElementById('messageSetsContainer');
        const addMessageSetBtn = document.getElementById('addMessageSetBtn');
        const messageBox = document.getElementById('messageBox');

        // New DOM elements for page navigation and preview controls
        const eventSelectionPage = document.getElementById('eventSelectionPage');
        const configEditorPage = document.getElementById('configEditorPage');
        const goToEditorBtn = document.getElementById('goToEditorBtn');
        const backButton = document.getElementById('backButton');
        const appTitle = document.getElementById('appTitle');
        const selectEventTypeRadios = document.querySelectorAll('input[name="selectEventType"]');
        const browserContainer = document.getElementById('browserContainer'); // Main browser window div
        const browserContent = document.getElementById('browserContent'); // Content area within the browser window
        const rightColumnContent = document.getElementById('rightColumnContent'); // Actual message preview content, now nested


        // Moved Save/Download buttons
        const downloadOption = document.getElementById('downloadOption');

        // Current configuration object, initialized with a default structure
        let currentConfig = {
            data: [], // Array of MessageSet objects
            probability: 50,
            waitTime: 5000,
            priority: EventPriority.MEDIUM
        };

        let currentSelectedEventType = "offlineEvent"; // Tracks the currently selected event type

        // Default placeholder image for the preview when no image URL is provided
        const PLACEHADER_IMAGE_URL = 'https://placehold.co/150x100/1A1A1A/FFFFFF?text=No+Image'; // Updated placeholder background

        /**
         * Displays a temporary message box for success or error feedback.
         * @param {string} message - The message to display.
         * @param {string} type - 'success' or 'error'.
         */
        function showMessage(message, type = 'success') {
            messageBox.textContent = message;
            messageBox.className = 'fixed top-4 right-4 p-3 border rounded-none z-10 opacity-0 transition duration-500 pointer-events-none'; // Reset classes for new design

            if (type === 'error') {
                messageBox.classList.add('error'); // Add error styling
            } else {
                messageBox.classList.add('success'); // Add success styling
            }
            messageBox.classList.add('show'); // Show it

            setTimeout(() => {
                messageBox.classList.remove('show');
            }, 3000);
        }

        /**
         * Shows the specified page (event selection or config editor) and updates the header/right column content.
         * @param {string} pageName - 'selection' or 'editor'.
         */
        function showPage(pageName) {
            if (pageName === 'selection') {
                eventSelectionPage.classList.remove('hidden');
                configEditorPage.classList.add('hidden');
                backButton.classList.add('hidden');
                appTitle.textContent = 'Event Configuration Editor';

                rightColumnContent.innerHTML = `
                    <div class="text-custom-light-text text-base font-bold dark:text-white  ">How to Use This Editor</div>
                    <div class="text-custom-light-text text-xs mt-1 dark:text-white">Select an event type on the left and click 'Go to Editor' to configure it.</div>
                    <div class="text-gray-800 text-xs mt-2 dark:text-white">Configurations are saved locally in your browser.</div>
                `;
            } else { // 'editor' page
                eventSelectionPage.classList.add('hidden');
                configEditorPage.classList.remove('hidden');
                backButton.classList.remove('hidden');
                appTitle.textContent = `Editing: ${currentSelectedEventType.replace('Event', '')} Event`;

                loadConfiguration(); // Load specific event config when entering editor
                updatePreview(); // Ensure preview is updated after loading
            }
        }

        /**
         * Loads configuration from localStorage based on `currentSelectedEventType`.
         * If no configuration is found, initializes with a default empty structure.
         */
        function loadConfiguration() {
            const storedConfig = localStorage.getItem(`${currentSelectedEventType}Config`);

            if (storedConfig) {
                try {
                    currentConfig = JSON.parse(storedConfig);
                    if (!Array.isArray(currentConfig.data)) {
                        currentConfig.data = [];
                    }
                } catch (e) {
                    console.error("Error parsing stored configuration:", e);
                    showMessage("Error loading configuration. Using default.", "error");
                    resetToDefaultConfig();
                }
            } else {
                resetToDefaultConfig();
            }
            updateUIFromConfig();
        }

        /**
         * Resets the current configuration to its default empty state.
         */
        function resetToDefaultConfig() {
            currentConfig = {
                data: [],
                probability: 50,
                waitTime: 5000,
                priority: EventPriority.MEDIUM
            };
        }

        /**
         * Updates the UI elements (inputs) based on the currentConfig object.
         */
        function updateUIFromConfig() {
            probabilityInput.value = currentConfig.probability;
            waitTimeInput.value = currentConfig.waitTime;
            prioritySelect.value = currentConfig.priority;
            renderMessageSets(); // Re-render all message set input fields
        }

        /**
         * Saves the currentConfig to localStorage under the appropriate key.
         */
        function saveConfiguration() {
            try {
                localStorage.setItem(`${currentSelectedEventType}Config`, JSON.stringify(currentConfig));
                showMessage("Configuration saved successfully!", "success");
            } catch (e) {
                console.error("Error saving configuration to localStorage:", e);
                showMessage("Failed to save configuration. Storage might be full.", "error");
            }
        }

        /**
         * Adds a new, empty message set object to the currentConfig.data array.
         * Then re-renders all message sets.
         */
        function addMessageSet() {
            currentConfig.data.push({
                texts: ["New message"], // Default text for a new message set
                src: "",
                position: "bottom-right",
                size: "medium"
            });
            renderMessageSets();
            updatePreview();
            // Scroll to the newly added message set
            messageSetsContainer.lastElementChild?.scrollIntoView({ behavior: 'smooth', block: 'end' });
        }

        /**
         * Removes a message set from the currentConfig.data array at the specified index.
         * Then re-renders all message sets and updates the preview.
         * @param {number} index - The index of the message set to remove.
         */
        function removeMessageSet(index) {
            currentConfig.data.splice(index, 1);
            renderMessageSets();
            updatePreview();
            showMessage(`Message Set ${index + 1} removed.`, "success");
        }

        /**
         * Renders (or re-renders) all message set input fields in the UI.
         * Clears existing fields and creates new ones based on currentConfig.data.
         */
        function renderMessageSets() {
            messageSetsContainer.innerHTML = ''; // Clear existing message sets

            currentConfig.data.forEach((messageSet, index) => {
                const messageSetDiv = document.createElement('div');
                // Use custom rgb for border
                messageSetDiv.className = 'message-set-item bg-custom-light-bg p-2 border-2 border-black/30 hover:border-black rounded-none text-xs';
                messageSetDiv.setAttribute('tabindex', '0'); // Make it focusable

                messageSetDiv.innerHTML = `
                    <div class="flex justify-between items-center mb-2">
                        <h3 class="text-sm font-semibold text-custom-light-text">Message Set ${index + 1}</h3>
                        <button class="remove-message-set-btn bg-custom-dark-bg text-white font-bold py-0.5 px-1.5 text-xs border border-custom-dark-bg rounded-none hover:bg-gray-800 transition duration-150"
                                data-index="${index}">Remove</button>
                    </div>
                    <div class="grid grid-cols-1 gap-2">
                        <div>
                            <label for="texts-${index}" class="block text-custom-light-text text-xs font-medium mb-1">Texts (comma-separated):</label>
                            <textarea id="texts-${index}" rows="2"
                                class="w-full p-1 border border-custom-light-text rounded-none text-xs bg-custom-light-bg text-custom-light-text resize-y"
                                placeholder="Enter messages, separated by commas">${messageSet.texts.join(', ')}</textarea>
                        </div>
                        <div>
                            <label for="src-${index}" class="block text-custom-light-text text-xs font-medium mb-1">Image URL:</label>
                            <input type="url" id="src-${index}" value="${messageSet.src}"
                                class="w-full p-1 border border-custom-light-text rounded-none text-xs bg-custom-light-bg text-custom-light-text"
                                placeholder="e.g., https://example.com/image.jpg">
                        </div>
                        <div>
                            <label for="position-${index}" class="block text-custom-light-text text-xs font-medium mb-1">Position:</label>
                            <select id="position-${index}" class="w-full p-1 border border-custom-light-text rounded-none text-xs bg-custom-light-bg text-custom-light-text">
                                <option value="bottom-left" ${messageSet.position === 'bottom-left' ? 'selected' : ''}>Bottom Left</option>
                                <option value="bottom-right" ${messageSet.position === 'bottom-right' ? 'selected' : ''}>Bottom Right</option>
                                <option value="top-left" ${messageSet.position === 'top-left' ? 'selected' : ''}>Top Left</option>
                                <option value="top-right" ${messageSet.position === 'top-right' ? 'selected' : ''}>Top Right</option>
                                <option value="center" ${messageSet.position === 'center' ? 'selected' : ''}>Center</option>
                            </select>
                        </div>
                        <div>
                            <label for="size-${index}" class="block text-custom-light-text text-xs font-medium mb-1">Size:</label>
                            <select id="size-${index}" class="w-full p-1 border border-custom-light-text rounded-none text-xs bg-custom-light-bg text-custom-light-text">
                                <option value="small" ${messageSet.size === 'small' ? 'selected' : ''}>Small</option>
                                <option value="medium" ${messageSet.size === 'medium' ? 'selected' : ''}>Medium</option>
                                <option value="large" ${messageSet.size === 'large' ? 'selected' : ''}>Large</option>
                            </select>
                        </div>
                    </div>
                `;
                messageSetsContainer.appendChild(messageSetDiv);

                // Add event listeners to the newly created inputs
                document.getElementById(`texts-${index}`).addEventListener('input', (e) => {
                    messageSet.texts = e.target.value.split(',').map(text => text.trim()).filter(text => text !== '');
                    updatePreview();
                    saveConfiguration();
                });
                document.getElementById(`src-${index}`).addEventListener('input', (e) => {
                    messageSet.src = e.target.value;
                    updatePreview();
                    saveConfiguration();
                });
                document.getElementById(`position-${index}`).addEventListener('change', (e) => {
                    messageSet.position = e.target.value;
                    updatePreview();
                    saveConfiguration();
                });
                document.getElementById(`size-${index}`).addEventListener('change', (e) => {
                    messageSet.size = e.target.value;
                    updatePreview();
                    saveConfiguration();
                });

                // Add hover (mouseenter/mouseleave) and focus (focusin/focusout) listeners
                messageSetDiv.addEventListener('mouseenter', () => {
                    updatePreview(messageSet);
                });
                messageSetDiv.addEventListener('mouseleave', () => {
                    updatePreview(); // Revert to default (first message set)
                });
                messageSetDiv.addEventListener('focusin', () => {
                    updatePreview(messageSet);
                });
                messageSetDiv.addEventListener('focusout', () => {
                    updatePreview(); // Revert to default (first message set)
                });
            });

            // Attach event listeners to remove buttons after all are rendered
            document.querySelectorAll('.remove-message-set-btn').forEach(button => {
                button.addEventListener('click', (e) => {
                    const indexToRemove = parseInt(e.target.dataset.index);
                    removeMessageSet(indexToRemove);
                });
            });
        }

        /**
         * Updates the live preview area based on the first message set in currentConfig.data.
         * Displays a placeholder if no message sets exist or if image URL is invalid/empty.
         * The content is now injected into the #browserContent div.
         * @param {object} [messageSetToPreview=null] - Optional: The specific message set object to preview.
         * If null, defaults to the first message set in currentConfig.data.
         */
        function updatePreview(messageSetToPreview = null) {
            // Clear only the #rightColumnContent div, not the entire browserContent
            rightColumnContent.innerHTML = '';

            let messageSetToUse = null;

            if (currentConfig.data.length > 0) { // Only attempt to preview if there's data
                if (messageSetToPreview) {
                    messageSetToUse = messageSetToPreview;
                } else {
                    messageSetToUse = currentConfig.data[0]; // Default to the first message set
                }
            }
            
            if (!messageSetToUse) {
                 // Display appropriate message based on current theme
                rightColumnContent.innerHTML = `
                    <div class="text-custom-light-text text-sm font-bold dark:text-custom-dark-text">No preview available. Add at least one message set.</div>
                    <div class="text-custom-light-text text-xs mt-1 dark:text-custom-dark-text">Configure messages to see a preview here.</div>
                `;
                return;
            }

            const textsToDisplay = messageSetToUse.texts.length > 0 ?
                                   messageSetToUse.texts[messageSetToUse.texts.length - 1] :
                                   'No text provided.';

            const imageUrl = messageSetToUse.src || PLACEHADER_IMAGE_URL;

            const previewBlock = document.createElement('div');
            // Applying Tailwind classes directly here, including absolute positioning
            previewBlock.className = `absolute flex flex-col gap-1 max-w-[90%] text-center p-0  rounded-none bg-custom-light-bg text-custom-light-text
                                      dark:bg-custom-dark-bg dark:text-custom-dark-text 
                                      ${'pos-' + messageSetToUse.position} ${'size-' + messageSetToUse.size}`;

            if (imageUrl) {
                const img = document.createElement('img');
                img.src = imageUrl;
                img.alt = 'Event Image';
                img.onerror = () => {
                    img.src = PLACEHADER_IMAGE_URL;
                };
                // Applying Tailwind classes directly here
                img.className = 'max-w-full h-auto rounded-none object-contain border border-[#ccc] dark:border-custom-dark-text'; /* Adjusted dark mode border */
                previewBlock.appendChild(img);
            }

            const textParagraph = document.createElement('p');
            textParagraph.textContent = textsToDisplay;
            textParagraph.className = 'text-content';
            previewBlock.appendChild(textParagraph);

            rightColumnContent.appendChild(previewBlock);
        }

        /**
         * Handles the selection of Save/Download options.
         * Ensures only one option is "selected" at a time.
         * @param {HTMLElement} selectedButton - The button element that was clicked.
         */
        function handleSaveDownloadOptionSelection(selectedButton) {
            const allOptionButtons = document.querySelectorAll('#saveDownloadButtons .footer-option-button');
            allOptionButtons.forEach(button => {
                if (button === selectedButton) {
                    button.classList.add('selected', 'bg-custom-dark-bg', 'text-custom-dark-text', 'border-custom-dark-bg');
                    button.classList.remove('bg-custom-light-bg', 'text-custom-light-text', 'border-custom-light-text');
                    button.setAttribute('aria-checked', 'true');
                    if (selectedButton.dataset.option === 'download') {
                        // Placeholder for download functionality
                        showMessage("Download functionality not implemented yet.", "info");
                    }
                } else {
                    button.classList.remove('selected', 'bg-custom-dark-bg', 'text-custom-dark-text', 'border-custom-dark-bg');
                    button.classList.add('bg-custom-light-bg', 'text-custom-light-text', 'border-custom-light-text');
                    button.setAttribute('aria-checked', 'false');
                }
            });
        }

        // --- Event Listeners ---

        // Load config when the selected radio button changes (on selection page)
        selectEventTypeRadios.forEach(radio => {
            radio.addEventListener('change', (e) => {
                currentSelectedEventType = e.target.value;
            });
        });

        // "Go to Editor" button click
        goToEditorBtn.addEventListener('click', () => {
            showPage('editor');
        });

        // "Back" button click
        backButton.addEventListener('click', () => {
            showPage('selection');
        });

        // Update currentConfig when probability changes
        probabilityInput.addEventListener('input', (e) => {
            currentConfig.probability = parseInt(e.target.value, 10);
        });

        // Update currentConfig when wait time changes
        waitTimeInput.addEventListener('input', (e) => {
            currentConfig.waitTime = parseInt(e.target.value, 10);
        });

        // Update currentConfig when priority changes
        prioritySelect.addEventListener('change', (e) => {
            currentConfig.priority = parseInt(e.target.value, 10);
        });

        // Add message set button click
        addMessageSetBtn.addEventListener('click', addMessageSet);

        // Preview button click
       

        // Theme toggle button click


        downloadOption.addEventListener('click', () => handleSaveDownloadOptionSelection(downloadOption));

        // Initial page load: show the selection page
        window.onload = () => {
            showPage('selection');
            // Set initial selected state for Save/Download buttons
            handleSaveDownloadOptionSelection(downloadOption); 
        };
    </script>
</body>
</html>
